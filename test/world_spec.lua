require '../World'

describe("World", function()
  it("#create", function()
    local world = World.create({num_maps = 2})
    assert.are.same(2, world.num_maps)
    assert.are.same(2, #world.maps)
  end)

  it("#create_map", function()
    local world = World.create({ num_maps = 0 })
    assert.are.same(0, #world.maps)
    World.create_map(world, {rows = 2, cols = 2})
    assert.are.same(1, #world.maps)
    assert.are.same(2, world.maps[1].rows)
  end)

  it("#create_player", function()
    local world = World.create()
    assert.are.same(nil, world.player)
    World.create_player(world, {name="traveler"})
    assert.are_not.same(nil, world.player)
    assert.are.same("traveler", world.player.name)
  end)

  it("#load_map", function()
    local world = World.create({ num_maps = 3})
    World.load_map(world, 1)
    assert.are.same(1, world.current_map_idx)
    World.load_map(world, 3)
    assert.are.same(3, world.current_map_idx)
  end)

  it("#player_position", function()
    local world = World.create({ num_maps = 1})
    World.load_map(world, 1)
    World.create_player(world)
    local pos = World.get_player_position(world)
    assert.are.same(1, pos.current_map)
    assert.are.same(1, pos.current_cell_idx)
  end)

  it("#player_cell", function()
    local world = World.create({ num_maps = 2 })
    World.load_map(world, 1)
    World.create_player(world)
    local cell = World.get_player_cell(world)
    assert.are_not.same(nil, cell)
    assert.are.same(1, cell.idx)
  end)

  it("#current_map", function()
    local world = World.create({ num_maps = 2 })
    World.load_map(world, 2)
    local map = World.get_current_map(world)
    assert.are.same(map, world.maps[2])
  end)

  it("#get_maps", function()
    local world = World.create({ num_maps = 2 })
    assert.are.same(world.maps, World.get_maps(world))
  end)

  it("#update", function()
    local world = World.create()
    assert.are.same(0, world.time.ticks)
    for i = 1, 5 do
      World.update(world)
    end
    assert.are.same(5, world.time.ticks)
  end)
end)
